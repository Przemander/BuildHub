# Docker Compose configuration for the BuildHub Authentication Service
# Defines the application and its dependent services (PostgreSQL, Redis, Monitoring)

version: "3.9"

services:
  # 1. The main application service, built from the local Dockerfile
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: buildhub/auth-service:latest
    container_name: auth-service
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${PORT:-3000}:3000"
    networks:
      - app-network
    environment:
      # Application settings sourced from the .env file
      APP_ENV: ${APP_ENV}
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: "1"

      # Service connection URLs (using Docker's internal DNS)
      # These override the localhost URLs from your .env file
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317

      # Secrets and credentials sourced directly from your .env file
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
      USE_DUMMY_EMAIL: ${USE_DUMMY_EMAIL}
      OTEL_ENABLED: ${OTEL_ENABLED}
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 2. PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # 3. Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auth-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379" # Using default Redis port for simplicity inside compose
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # 4. Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: auth-prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network

  # 5. Jaeger (for OpenTelemetry trace visualization)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: auth-jaeger
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC Receiver
    networks:
      - app-network

  # 6. Grafana (for metrics visualization and dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: auth-grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    networks:
      - app-network

# Shared network for all services to communicate via service names
networks:
  app-network:
    driver: bridge
    name: auth_service_network

# Named volumes for persistent data storage
volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
