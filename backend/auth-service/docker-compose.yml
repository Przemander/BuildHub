version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-buildhub}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bhdbjpak}
      POSTGRES_DB: ${POSTGRES_DB:-buildhub_auth}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"  # External port 5433, internal 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-buildhub} -d ${POSTGRES_DB:-buildhub_auth}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network

  redis:
    image: redis:7-alpine
    container_name: auth-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6380}:6379"  # Change external port to 6380
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - auth-network

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: buildhub/auth-service:latest
    container_name: auth-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application settings
      APP_ENV: ${APP_ENV:-development}
      RUST_LOG: ${RUST_LOG:-info,auth_service=debug}
      HOST: 0.0.0.0
      PORT: 3000
      
      # Database - using container names for internal networking
      DATABASE_URL: postgres://${POSTGRES_USER:-buildhub}:${POSTGRES_PASSWORD:-bhdbjpak}@postgres:5432/${POSTGRES_DB:-buildhub_auth}
      
      # Redis - using container name
      REDIS_URL: redis://redis:6379
      
      # JWT Settings
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-at-least-32-chars-long-change-in-production}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN:-3600}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN:-604800}
      
      # Email Settings
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_USERNAME: ${SMTP_USERNAME:-przemekjackowski23@gmail.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-qptxhycypwuiboep}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS:-przemekjackowski23@gmail.com}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3001}
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3001}
      
      # Testing
      TEST_SECRET: ${TEST_SECRET:-test-secret-key}
      TEST_MODE: ${TEST_MODE:-false}
      USE_DUMMY_EMAIL: ${USE_DUMMY_EMAIL:-false}
    ports:
      - "${APP_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - auth-network
    restart: unless-stopped

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: auth-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - auth-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: auth-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - auth-network
    profiles:
      - monitoring

networks:
  auth-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: