//! # Middleware Metrics - HTTP Layer Observability
//!
//! This module provides comprehensive metrics for HTTP middleware layers,
//! specifically focused on security middleware (authentication and rate limiting)
//! and their impact on client experience.
//!
//! ## Purpose
//!
//! While other metric modules track internal operations (JWT validation, Redis operations),
//! this module tracks the **HTTP-level decisions** made by middleware:
//! - Which HTTP status codes are returned to clients
//! - How security policies affect user experience  
//! - Authentication and authorization outcomes at the protocol level
//!
//! ## Metrics Overview
//!
//! ### 1. HTTP Response Tracking
//! - **`middleware_http_responses_total`**: Tracks HTTP responses from middleware
//! - Labels: `status_code`, `middleware_type`, `endpoint_group`
//! - Complements `http_responses_total` from error_metrics with middleware context
//!
//! ### 2. Security Policy Enforcement  
//! - **`security_policy_enforcements_total`**: Tracks security policy decisions
//! - Labels: `policy_type`, `action`, `endpoint_group`
//! - Shows how often rate limiting, authentication, etc. blocks requests
//!
//! ## Integration Strategy
//!
//! This module works alongside existing metrics:
//! - `jwt_metrics`: Tracks JWT validation internals → This tracks HTTP 401 responses
//! - `rate_limiter_metrics`: Tracks Redis rate limit checks → This tracks HTTP 429 responses  
//! - `error_metrics`: Tracks general HTTP responses → This adds middleware-specific context

use lazy_static::lazy_static;
use prometheus::{register_counter_vec, CounterVec};
use std::sync::atomic::{AtomicBool, Ordering};
use crate::log_info;

lazy_static! {
    /// 🔒 METRIC 1: HTTP Responses from Middleware
    /// Tracks what HTTP status codes middleware returns to clients
    /// Labels: status_code (401, 429, 503, etc.), middleware_type, endpoint_group
    pub static ref MIDDLEWARE_HTTP_RESPONSES: CounterVec = register_counter_vec!(
        "middleware_http_responses_total",
        "HTTP responses generated by middleware layers",
        &["status_code", "middleware_type", "endpoint_group"]
    ).expect("Failed to register middleware_http_responses_total");

    /// 🛡️ METRIC 2: Security Policy Enforcement
    /// Tracks how security policies affect requests
    /// Labels: policy_type (rate_limit, auth, lockout), action (allowed, blocked), endpoint_group  
    pub static ref SECURITY_POLICY_ENFORCEMENTS: CounterVec = register_counter_vec!(
        "security_policy_enforcements_total", 
        "Security policy enforcement decisions",
        &["policy_type", "action", "endpoint_group"]
    ).expect("Failed to register security_policy_enforcements_total");

    /// 📊 METRIC 3: Middleware Processing Duration
    /// Tracks how long middleware takes to make decisions
    /// Labels: middleware_type, endpoint_group
    pub static ref MIDDLEWARE_PROCESSING_DURATION: prometheus::HistogramVec = prometheus::register_histogram_vec!(
        "middleware_processing_duration_seconds",
        "Time spent in middleware processing",
        &["middleware_type", "endpoint_group"],
        vec![0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0]
    ).expect("Failed to register middleware_processing_duration_seconds");
}

static MIDDLEWARE_METRICS_INITIALIZED: AtomicBool = AtomicBool::new(false);

pub fn init_middleware_metrics() {
    if MIDDLEWARE_METRICS_INITIALIZED
        .compare_exchange(false, true, Ordering::SeqCst, Ordering::SeqCst)
        .is_err()
    {
        return;
    }

    lazy_static::initialize(&MIDDLEWARE_HTTP_RESPONSES);
    lazy_static::initialize(&SECURITY_POLICY_ENFORCEMENTS);
    lazy_static::initialize(&MIDDLEWARE_PROCESSING_DURATION);

    log_info!(
        "MiddlewareMetrics",
        "Middleware metrics initialized successfully",
        "middleware_metrics_init_success"
    );
}

// =============================================================================
// ✅ HTTP RESPONSE TRACKING API
// =============================================================================

/// Records HTTP response generated by middleware
/// 
/// # Arguments
/// * `status_code` - HTTP status code (401, 429, 503, etc.)
/// * `middleware_type` - Which middleware generated response ("jwt_auth", "login_guard", "rate_limiter")
/// * `endpoint_group` - Logical grouping ("auth", "protected", "public")
pub fn record_middleware_http_response(status_code: u16, middleware_type: &str, endpoint_group: &str) {
    MIDDLEWARE_HTTP_RESPONSES
        .with_label_values(&[&status_code.to_string(), middleware_type, endpoint_group])
        .inc();
}

// =============================================================================
// ✅ SECURITY POLICY ENFORCEMENT API  
// =============================================================================

/// Records security policy enforcement decision
/// 
/// # Arguments
/// * `policy_type` - Type of policy ("rate_limit", "authentication", "account_lockout")
/// * `action` - Decision made ("allowed", "blocked", "failed_open")
/// * `endpoint_group` - Logical grouping ("auth", "protected")
pub fn record_security_policy_enforcement(policy_type: &str, action: &str, endpoint_group: &str) {
    SECURITY_POLICY_ENFORCEMENTS
        .with_label_values(&[policy_type, action, endpoint_group])
        .inc();
}

// =============================================================================
// ✅ MIDDLEWARE PERFORMANCE TRACKING
// =============================================================================

/// Records middleware processing duration
/// 
/// # Arguments  
/// * `duration_seconds` - Time spent in middleware
/// * `middleware_type` - Which middleware ("jwt_auth", "login_guard")
/// * `endpoint_group` - Logical grouping ("auth", "protected")
pub fn record_middleware_duration(duration_seconds: f64, middleware_type: &str, endpoint_group: &str) {
    MIDDLEWARE_PROCESSING_DURATION
        .with_label_values(&[middleware_type, endpoint_group])
        .observe(duration_seconds);
}

// =============================================================================
// ✅ CONVENIENCE FUNCTIONS FOR COMMON SCENARIOS
// =============================================================================

/// JWT Authentication middleware helpers
pub mod jwt_auth {
    use super::*;

    pub fn record_success(endpoint_group: &str) {
        record_security_policy_enforcement("authentication", "allowed", endpoint_group);
    }

    pub fn record_unauthorized(endpoint_group: &str, reason: &str) {
        record_middleware_http_response(401, "jwt_auth", endpoint_group);
        record_security_policy_enforcement("authentication", "blocked", endpoint_group);
    }

    pub fn record_service_unavailable(endpoint_group: &str) {
        record_middleware_http_response(503, "jwt_auth", endpoint_group);
        record_security_policy_enforcement("authentication", "failed_open", endpoint_group);
    }
}

/// Login Guard middleware helpers  
pub mod login_guard {
    use super::*;

    pub fn record_rate_limit_blocked(endpoint_group: &str) {
        record_middleware_http_response(429, "login_guard", endpoint_group);
        record_security_policy_enforcement("rate_limit", "blocked", endpoint_group);
    }

    pub fn record_account_lockout_blocked(endpoint_group: &str) {
        record_middleware_http_response(401, "login_guard", endpoint_group);
        record_security_policy_enforcement("account_lockout", "blocked", endpoint_group);
    }

    pub fn record_allowed(endpoint_group: &str) {
        record_security_policy_enforcement("rate_limit", "allowed", endpoint_group);
        record_security_policy_enforcement("account_lockout", "allowed", endpoint_group);
    }

    pub fn record_redis_fail_open(endpoint_group: &str) {
        record_security_policy_enforcement("rate_limit", "failed_open", endpoint_group);
        record_security_policy_enforcement("account_lockout", "failed_open", endpoint_group);
    }
}

// =============================================================================
// PROMETHEUS QUERIES AND ALERTING EXAMPLES
// =============================================================================

/*
## Suggested Prometheus Queries:

### Authentication Failure Rate by Endpoint:
# Rate of 401s from JWT middleware
rate(middleware_http_responses_total{status_code="401",middleware_type="jwt_auth"}[5m]) by (endpoint_group)

### Rate Limiting Effectiveness:
# How often are requests blocked vs allowed
rate(security_policy_enforcements_total{policy_type="rate_limit",action="blocked"}[5m]) /
rate(security_policy_enforcements_total{policy_type="rate_limit"}[5m]) by (endpoint_group)

### Security Policy Health:
# How often policies fail open (Redis unavailable)
rate(security_policy_enforcements_total{action="failed_open"}[5m]) by (policy_type)

### Middleware Performance:
# 95th percentile middleware processing time
histogram_quantile(0.95, 
  rate(middleware_processing_duration_seconds_bucket[5m])
) by (middleware_type, endpoint_group)

## Suggested Alerts:

### Critical: Authentication System Down
ALERT AuthenticationSystemDown IF
  rate(security_policy_enforcements_total{policy_type="authentication",action="failed_open"}[2m]) > 0

### Warning: High Authentication Failure Rate  
ALERT HighAuthFailureRate IF
  (rate(middleware_http_responses_total{status_code="401",middleware_type="jwt_auth"}[5m]) /
   rate(middleware_http_responses_total{middleware_type="jwt_auth"}[5m])) > 0.1

### Warning: Rate Limiting Very Active
ALERT HighRateLimitingActivity IF
  rate(middleware_http_responses_total{status_code="429"}[5m]) > 20

### Critical: Many Account Lockouts
ALERT SuspiciousAccountLockouts IF
  rate(security_policy_enforcements_total{policy_type="account_lockout",action="blocked"}[10m]) > 10
*/

#[cfg(test)]
mod tests {
    use super::*;
    use std::sync::Once;

    static INIT: Once = Once::new();

    fn init_test_metrics() {
        INIT.call_once(|| {
            init_middleware_metrics();
        });
    }

    #[test]
    fn test_http_response_recording() {
        init_test_metrics();

        // Test various HTTP responses
        record_middleware_http_response(401, "jwt_auth", "protected");
        record_middleware_http_response(429, "login_guard", "auth");
        record_middleware_http_response(503, "jwt_auth", "protected");

        // Verify metrics are recorded
        assert_eq!(
            MIDDLEWARE_HTTP_RESPONSES
                .with_label_values(&["401", "jwt_auth", "protected"])
                .get(),
            1.0
        );
        assert_eq!(
            MIDDLEWARE_HTTP_RESPONSES
                .with_label_values(&["429", "login_guard", "auth"])
                .get(),
            1.0
        );
        assert_eq!(
            MIDDLEWARE_HTTP_RESPONSES
                .with_label_values(&["503", "jwt_auth", "protected"])
                .get(),
            1.0
        );
    }

    #[test] 
    fn test_security_policy_enforcement() {
        init_test_metrics();

        // Test different policy decisions
        record_security_policy_enforcement("rate_limit", "blocked", "auth");
        record_security_policy_enforcement("authentication", "allowed", "protected");
        record_security_policy_enforcement("account_lockout", "failed_open", "auth");

        // Verify metrics
        assert_eq!(
            SECURITY_POLICY_ENFORCEMENTS
                .with_label_values(&["rate_limit", "blocked", "auth"])
                .get(),
            1.0
        );
        assert_eq!(
            SECURITY_POLICY_ENFORCEMENTS
                .with_label_values(&["authentication", "allowed", "protected"])
                .get(),
            1.0
        );
        assert_eq!(
            SECURITY_POLICY_ENFORCEMENTS
                .with_label_values(&["account_lockout", "failed_open", "auth"])
                .get(),
            1.0
        );
    }

    #[test]
    fn test_convenience_functions() {
        init_test_metrics();

        // Test JWT auth helpers
        jwt_auth::record_success("protected");
        jwt_auth::record_unauthorized("protected", "expired_token");
        jwt_auth::record_service_unavailable("protected");

        // Test login guard helpers
        login_guard::record_rate_limit_blocked("auth");
        login_guard::record_account_lockout_blocked("auth");
        login_guard::record_allowed("auth");

        // Verify JWT auth metrics
        assert_eq!(
            SECURITY_POLICY_ENFORCEMENTS
                .with_label_values(&["authentication", "allowed", "protected"])
                .get(),
            1.0
        );
        assert_eq!(
            MIDDLEWARE_HTTP_RESPONSES
                .with_label_values(&["401", "jwt_auth", "protected"])
                .get(),
            1.0
        );

        // Verify login guard metrics
        assert_eq!(
            MIDDLEWARE_HTTP_RESPONSES
                .with_label_values(&["429", "login_guard", "auth"])
                .get(),
            1.0
        );
        assert_eq!(
            SECURITY_POLICY_ENFORCEMENTS
                .with_label_values(&["rate_limit", "blocked", "auth"])
                .get(),
            1.0
        );
    }

    #[test]
    fn test_middleware_duration_recording() {
        init_test_metrics();

        // Record various durations
        record_middleware_duration(0.05, "jwt_auth", "protected");
        record_middleware_duration(0.001, "login_guard", "auth");
        record_middleware_duration(0.1, "jwt_auth", "protected");

        // Verify histogram recorded values (sample count should be 2 for jwt_auth/protected)
        let histogram = MIDDLEWARE_PROCESSING_DURATION
            .with_label_values(&["jwt_auth", "protected"]);
        assert_eq!(histogram.get_sample_count(), 2);
    }
}